
<div id="map" style="height: 400px;" class="bottom-20"></div>

<%= form_for @shop, :html => { class: "form-horizontal shop",  id: 'shop_form' }, 
  validate: true do |f| %>

  <% if @shop.errors.any? %>
    <div id="error_expl" class="panel panel-danger">
      <div class="panel-heading">
        <h3 class="panel-title"><%= pluralize(@shop.errors.count, "error") %> prohibited this shop from being saved:</h3>
      </div>
      <div class="panel-body">
        <ul>
        <% @shop.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
        </ul>
      </div>
    </div>
  <% end %>

  <div class="page-header">
    <h3>Details</h3>
  </div>

  <div class="form-group">
    <%= f.label :name, :class => 'control-label col-lg-2' %>
    <div class="col-lg-10">
      <%= f.text_field :name, :class => 'form-control' %>
    </div>
    <%=f.error_span(:name) %>
  </div>

  <div class="form-group">
    <%= f.label :description, :class => 'control-label col-lg-2' %>
    <div class="col-lg-10">
      <%= f.text_area :description, :class => 'form-control' %>
    </div>
    <%=f.error_span(:description) %>
  </div>

  <div class="form-group">
    <%= f.label :category_id, :class => 'control-label col-lg-2' %>
    <div class="col-lg-10">
      <%= f.collection_select(:category_id, Category.all, :id, :name, {:selected => f.object.category_id}, {:class=>'form-control'}) %>

    </div>
    <%=f.error_span(:category_id) %>
  </div>

  <div class="form-group">
    <%= f.label 'Lat/Long', :class => 'control-label col-lg-2' %>
    <div class="col-lg-4">
      <%= f.text_field :lat, :class => 'form-control', id: 'us2-lat', readonly: true %>
    </div>

    <div class="col-lg-4">
      <%= f.text_field :long, :class => 'form-control', id: 'us2-lon', readonly: true %>
    </div>
  </div>

  <div class="form-group">
    <%= f.label :address, :class => 'control-label col-lg-2' %>
    <div class="col-lg-10">
      <%= f.text_field :address, :class => 'form-control', id: 'us2-address' %>
    </div>
    <%=f.error_span(:address) %>
  </div>
  <div class="form-group">
    <%= f.label :phone_number, :class => 'control-label col-lg-2' %>
    <div class="col-lg-10">
      <%= f.text_field :phone_number, :class => 'form-control' %>
    </div>
    <%=f.error_span(:phone_number) %>
  </div>

  <div class="form-group">
    <%= f.label :photo, 'Main Photo', :class => 'control-label col-lg-2' %>
    <div class="col-lg-10">
      <%= f.file_field :photo_file, id: 'main_photo_file_field', accept: 'image/png,image/jpeg' %>
      <%= f.hidden_field :main_photo_url, id: 'main_photo_hidden_field' %>
    </div>
    <%=f.error_span(:photo) %>
  </div>

  <div class="page-header">
    <h3>Other photos</h3>
  </div>

  <div class="form-group ">
    <%= f.fields_for :photos do |photo| %>
      <%= render 'photo_fields', f: photo %>
    <% end %>
    <div class="links col-lg-offset-2 col-lg-10 top-30">
      <%= link_to_add_association 'Add New Photo', f, :photos, :class => 'btn btn-default' %>
    </div>
  </div>

  <div class="form-group">
    <div class="col-lg-offset-2 col-lg-10">
      <%= f.submit nil, :class => 'btn btn-primary', id: 'submit_button' %>
      <%= link_to t('.cancel', :default => t("helpers.links.cancel")),
                shops_path, :class => 'btn btn-default' %>
    </div>
  </div>

<script>
  var initialLat = 25.276987;
  var initialLong = 55.296249;

  <% if !f.object.new_record? %>
    initialLat = <%=f.object.lat%>;
    initialLong = <%=f.object.long%>;
  <% end %>

  $('#map').locationpicker({
        location: {
            latitude: initialLat,
            longitude: initialLong
        },
        radius: 50,
        inputBinding: {
            latitudeInput: $('#us2-lat'),
            longitudeInput: $('#us2-lon'),
            locationNameInput: $('#us2-address')
        },
        enableAutocomplete: true
        // autocompleteOptions: {
        //     componentRestrictions: {country: 'ae'}
        // }
    });

  var config = {
      apiKey: "AIzaSyBiH5nQyb9vwCR9OL0f8ugGajNZHJh90nk",
      authDomain: "waritex-promotions-firebase.firebaseapp.com",
      databaseURL: "https://waritex-promotions-firebase.firebaseio.com",
      projectId: "waritex-promotions-firebase",
      storageBucket: "waritex-promotions-firebase.appspot.com",
      messagingSenderId: "786576419400"
  };

  if (!firebase.apps.length) {
    firebase.initializeApp(config);
  }

  var form = $('#shop_form');
  var newFilesCount = 0;
  var totalFilesCount = 0;

  $('#submit_button').click(function(e){
    e.preventDefault();

    // find all fields of the validated form and trigger validation by bluring
    $('*[data-validate="true"]').blur();

    if(!form.isValid(ClientSideValidations.validators)){
      return;
    }

    var mainPhotoHiddenField = $('#main_photo_hidden_field');
    var mainPhotoFileField = $('#main_photo_file_field');

    // check if user selected photo, or a previous photo was added in case of edit
    if(!hasMainPhoto(mainPhotoFileField, mainPhotoHiddenField)){
      alert("Please select shop main photo");
      return;
    }

    var oldHiddenFields = $('.old_photo_hidden_field');
    var newHiddenFields = $('.new_photo_hidden_field');

    var fileFields = $('.photo_file_field');

    newFilesCount = getNumberOfNewFiles(fileFields);

    // A new file field without a photo selected, he needs either to remove it or add a photo
    if(newFilesCount != fileFields.size()){
      alert("Please add the missing photos");
      return;
    }

    if(mainPhotoUploaded(mainPhotoFileField)){
      totalFilesCount = newFilesCount + 1;
    } else {
      totalFilesCount = newFilesCount;
    }

    if(totalFilesCount == 0){
      form.submit();
      return;
    }

    showPleaseWait();

    // upload new files
    fileFields.each(function(index) {
      var fileField = fileFields[index];
      var hiddenField = newHiddenFields[index]

      var files = fileField.files;

      if(files.length > 0){
        uploadFile(files[0], hiddenField);
      }

    });

    if(mainPhotoUploaded(mainPhotoFileField)){
      var files = mainPhotoFileField.prop('files');
      uploadFile(files[0], mainPhotoHiddenField[0]);
    }


  });

  function hasMainPhoto(fileField, hiddenField){
    return mainPhotoUploaded(fileField) || hiddenField.val();
  }

  function mainPhotoUploaded(fileField){
    var files = fileField.prop('files');
    return files.length > 0;
  }

  function getNumberOfNewFiles(fileFields){
    var result = 0;
    fileFields.each(function(index) {
      var fileField = fileFields[index];
      if(fileField.files.length > 0){
        result ++;
      }
    });
    return result;
  }

  function fileUploaded(){
    totalFilesCount --;
    if(totalFilesCount == 0){
      hidePleaseWait();
      form.submit();
    }
  }

  function uploadFile(file, hiddenField){
    var storageRef = firebase.storage().ref();
    var fileRef = storageRef.child('shops/' + file.name);
    var uploadTask = fileRef.put(file)

    uploadTask.on('state_changed', 
      null,
      function error(error) {
        alert('Error occured while uploading files');
      },
      function complete() {
        var downloadURL = uploadTask.snapshot.downloadURL;
        hiddenField.value = downloadURL;
        fileUploaded();
      });
  }


</script>

<% end %>
